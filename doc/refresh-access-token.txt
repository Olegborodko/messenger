Access Token
Назначение: Access_token используется для аутентификации запросов к API сервисов, таких как API Google. Он позволяет приложению получить доступ к данным и ресурсам от имени пользователя.
Срок действия: Access_token имеет ограниченный срок действия (например, несколько минут или часов). После истечения срока действия токен становится недействительным.
Использование на фронтенде: Access_token можно использовать для аутентификации запросов к API сервисов прямо из фронтенда. Однако будьте осторожны, чтобы не хранить токен в небезопасном месте (например, в локальном хранилище или cookies без защиты).
Использование на бэкенде: Access_token также можно использовать на сервере для аутентификации запросов к API сервисов. Он может быть передан на сервер после аутентификации пользователя на фронтенде.
Refresh Token
Назначение: Refresh_token используется для получения нового access_token, когда предыдущий access_token истек. Это позволяет продолжать работу с API сервисами без повторной аутентификации пользователя.
Срок действия: Refresh_token обычно имеет более длительный срок действия, чем access_token (например, несколько дней или недель).
Использование на фронтенде: Refresh_token обычно не рекомендуется хранить на фронтенде из-за соображений безопасности. Если он утечет, злоумышленник сможет получить доступ к данным пользователя.
Использование на бэкенде: Refresh_token следует хранить в безопасном месте на сервере (например, в зашифрованной базе данных) и использовать для получения нового access_token по мере необходимости. Сервер должен обрабатывать все обновления токенов, чтобы гарантировать безопасность.

Общие рекомендации по использованию токенов
Защита токенов: Токены должны храниться в безопасных местах. На фронтенде используйте access_token с осторожностью, не передавайте его в URL-адресах и убедитесь, что он не утечет.
Обновление токенов: На сервере используйте refresh_token для получения новых access_token по мере необходимости. Это позволяет продолжать работу с API сервисами без необходимости повторно аутентифицировать пользователя.
Обработка ошибок: Внедрите обработку ошибок для ситуации, когда access_token истекает или становится недействительным. Это позволит вам обновлять токены и поддерживать непрерывность работы приложения.
Политика безопасности: Убедитесь, что вы соблюдаете все политики безопасности, установленные сервисами, к которым вы обращаетесь, особенно в отношении хранения и передачи токенов.

- токен не хранится в переменных состояния
- access токен обычно выдается на 1 час
- токены лучше всего хранить в HTTP-only cookie
  либо в localStorage (что менее безопасно)

  что-бы получить refresh token нужно 
  - на фронтенде установить параметр flow: 'auth-code'
  - на бекенде получить код, и передать его в client.getToken
  client при этом объявляется без redirect_url
  const client = new OAuth2Client(googleClientId, googleClientSecret, 'postmessage');